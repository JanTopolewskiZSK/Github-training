name: Learning GitHub Script
on:
  issues:
    types: [opened]

permissions: write-all
    
jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Comment on new issue
      uses: actions/github-script@v7
      with:
        github-token: "${{secrets.GITHUB_TOKEN}}"
        script: |
            const fs = require('fs')
            const issueBody = fs.readFileSync("Test/test_file.txt", "utf8")
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: issueBody
            });
    - name: Get Project ID (for Projects v2)
      id: get_project
      if: contains(github.event.issue.labels.*.name, 'bug')
      uses: actions/github-script@v7
      with:
        github-token: "${{ secrets.PERSONAL_TOKEN }}"
        script: |
          const query = `
            query {
              user(login: "JanTopolewskiZSK") {
                projectV2(number: 5) {
                  id
                  title
                }
              }
            }
          `;
          const result = await github.graphql(query);
          console.log("Full GraphQL response:", JSON.stringify(result, null, 2));
          return result.user.projectV2.id;

    - name: Add issue to the project
      if: contains(github.event.issue.labels.*.name, 'bug')
      uses: actions/github-script@v7
      env:
        PROJECT_ID: ${{ steps.get_project.outputs.result }}
      with:
        github-token: "${{ secrets.PERSONAL_TOKEN }}"
        script: |
          const projectId = process.env.PROJECT_ID;;
          const issueId = context.payload.issue.node_id;

          const mutation = `
            mutation($projectId: ID!, $issueId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $issueId}) {
                item {
                  id
                }
              }
            }
          `;

          const result = await github.graphql(mutation, {
            projectId,
            issueId
          });

          console.log("âœ… Added issue to project:", result.addProjectV2ItemById.item.id);
